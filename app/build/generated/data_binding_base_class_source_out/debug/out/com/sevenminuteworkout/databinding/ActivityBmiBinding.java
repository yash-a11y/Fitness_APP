// Generated by view binder compiler. Do not edit!
package com.sevenminuteworkout.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.LinearLayout;
import android.widget.RadioButton;
import android.widget.RadioGroup;
import android.widget.RelativeLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.AppCompatEditText;
import androidx.appcompat.widget.Toolbar;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.textfield.TextInputLayout;
import com.sevenminuteworkout.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityBmiBinding implements ViewBinding {
  @NonNull
  private final RelativeLayout rootView;

  @NonNull
  public final Button bmibtn;

  @NonNull
  public final Toolbar bmitoolbar;

  @NonNull
  public final TextInputLayout feetinpt;

  @NonNull
  public final TextInputLayout heightinpt;

  @NonNull
  public final TextInputLayout inchinp;

  @NonNull
  public final LinearLayout metricUnitLay;

  @NonNull
  public final RadioButton metrivUnit;

  @NonNull
  public final RadioGroup radiogrp;

  @NonNull
  public final TextView tvBmi;

  @NonNull
  public final TextView tvBmiMsg;

  @NonNull
  public final TextView tvBmiTxt;

  @NonNull
  public final AppCompatEditText tvFeet;

  @NonNull
  public final AppCompatEditText tvHeight;

  @NonNull
  public final AppCompatEditText tvHeightIn;

  @NonNull
  public final AppCompatEditText tvWeight;

  @NonNull
  public final AppCompatEditText tvWeightPound;

  @NonNull
  public final LinearLayout txtl;

  @NonNull
  public final LinearLayout unitUsLay;

  @NonNull
  public final RadioButton usUnit;

  @NonNull
  public final TextInputLayout weightPoundInpt;

  @NonNull
  public final TextInputLayout weightinpt;

  private ActivityBmiBinding(@NonNull RelativeLayout rootView, @NonNull Button bmibtn,
      @NonNull Toolbar bmitoolbar, @NonNull TextInputLayout feetinpt,
      @NonNull TextInputLayout heightinpt, @NonNull TextInputLayout inchinp,
      @NonNull LinearLayout metricUnitLay, @NonNull RadioButton metrivUnit,
      @NonNull RadioGroup radiogrp, @NonNull TextView tvBmi, @NonNull TextView tvBmiMsg,
      @NonNull TextView tvBmiTxt, @NonNull AppCompatEditText tvFeet,
      @NonNull AppCompatEditText tvHeight, @NonNull AppCompatEditText tvHeightIn,
      @NonNull AppCompatEditText tvWeight, @NonNull AppCompatEditText tvWeightPound,
      @NonNull LinearLayout txtl, @NonNull LinearLayout unitUsLay, @NonNull RadioButton usUnit,
      @NonNull TextInputLayout weightPoundInpt, @NonNull TextInputLayout weightinpt) {
    this.rootView = rootView;
    this.bmibtn = bmibtn;
    this.bmitoolbar = bmitoolbar;
    this.feetinpt = feetinpt;
    this.heightinpt = heightinpt;
    this.inchinp = inchinp;
    this.metricUnitLay = metricUnitLay;
    this.metrivUnit = metrivUnit;
    this.radiogrp = radiogrp;
    this.tvBmi = tvBmi;
    this.tvBmiMsg = tvBmiMsg;
    this.tvBmiTxt = tvBmiTxt;
    this.tvFeet = tvFeet;
    this.tvHeight = tvHeight;
    this.tvHeightIn = tvHeightIn;
    this.tvWeight = tvWeight;
    this.tvWeightPound = tvWeightPound;
    this.txtl = txtl;
    this.unitUsLay = unitUsLay;
    this.usUnit = usUnit;
    this.weightPoundInpt = weightPoundInpt;
    this.weightinpt = weightinpt;
  }

  @Override
  @NonNull
  public RelativeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityBmiBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityBmiBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_bmi, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityBmiBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.bmibtn;
      Button bmibtn = ViewBindings.findChildViewById(rootView, id);
      if (bmibtn == null) {
        break missingId;
      }

      id = R.id.bmitoolbar;
      Toolbar bmitoolbar = ViewBindings.findChildViewById(rootView, id);
      if (bmitoolbar == null) {
        break missingId;
      }

      id = R.id.feetinpt;
      TextInputLayout feetinpt = ViewBindings.findChildViewById(rootView, id);
      if (feetinpt == null) {
        break missingId;
      }

      id = R.id.heightinpt;
      TextInputLayout heightinpt = ViewBindings.findChildViewById(rootView, id);
      if (heightinpt == null) {
        break missingId;
      }

      id = R.id.inchinp;
      TextInputLayout inchinp = ViewBindings.findChildViewById(rootView, id);
      if (inchinp == null) {
        break missingId;
      }

      id = R.id.metric_unit_lay;
      LinearLayout metricUnitLay = ViewBindings.findChildViewById(rootView, id);
      if (metricUnitLay == null) {
        break missingId;
      }

      id = R.id.metriv_unit;
      RadioButton metrivUnit = ViewBindings.findChildViewById(rootView, id);
      if (metrivUnit == null) {
        break missingId;
      }

      id = R.id.radiogrp;
      RadioGroup radiogrp = ViewBindings.findChildViewById(rootView, id);
      if (radiogrp == null) {
        break missingId;
      }

      id = R.id.tv_bmi;
      TextView tvBmi = ViewBindings.findChildViewById(rootView, id);
      if (tvBmi == null) {
        break missingId;
      }

      id = R.id.tv_bmi_msg;
      TextView tvBmiMsg = ViewBindings.findChildViewById(rootView, id);
      if (tvBmiMsg == null) {
        break missingId;
      }

      id = R.id.tv_bmi_txt;
      TextView tvBmiTxt = ViewBindings.findChildViewById(rootView, id);
      if (tvBmiTxt == null) {
        break missingId;
      }

      id = R.id.tv_feet;
      AppCompatEditText tvFeet = ViewBindings.findChildViewById(rootView, id);
      if (tvFeet == null) {
        break missingId;
      }

      id = R.id.tv_height;
      AppCompatEditText tvHeight = ViewBindings.findChildViewById(rootView, id);
      if (tvHeight == null) {
        break missingId;
      }

      id = R.id.tv_height_in;
      AppCompatEditText tvHeightIn = ViewBindings.findChildViewById(rootView, id);
      if (tvHeightIn == null) {
        break missingId;
      }

      id = R.id.tv_weight;
      AppCompatEditText tvWeight = ViewBindings.findChildViewById(rootView, id);
      if (tvWeight == null) {
        break missingId;
      }

      id = R.id.tv_weight_pound;
      AppCompatEditText tvWeightPound = ViewBindings.findChildViewById(rootView, id);
      if (tvWeightPound == null) {
        break missingId;
      }

      id = R.id.txtl;
      LinearLayout txtl = ViewBindings.findChildViewById(rootView, id);
      if (txtl == null) {
        break missingId;
      }

      id = R.id.unit_us_lay;
      LinearLayout unitUsLay = ViewBindings.findChildViewById(rootView, id);
      if (unitUsLay == null) {
        break missingId;
      }

      id = R.id.us_unit;
      RadioButton usUnit = ViewBindings.findChildViewById(rootView, id);
      if (usUnit == null) {
        break missingId;
      }

      id = R.id.weight_pound_inpt;
      TextInputLayout weightPoundInpt = ViewBindings.findChildViewById(rootView, id);
      if (weightPoundInpt == null) {
        break missingId;
      }

      id = R.id.weightinpt;
      TextInputLayout weightinpt = ViewBindings.findChildViewById(rootView, id);
      if (weightinpt == null) {
        break missingId;
      }

      return new ActivityBmiBinding((RelativeLayout) rootView, bmibtn, bmitoolbar, feetinpt,
          heightinpt, inchinp, metricUnitLay, metrivUnit, radiogrp, tvBmi, tvBmiMsg, tvBmiTxt,
          tvFeet, tvHeight, tvHeightIn, tvWeight, tvWeightPound, txtl, unitUsLay, usUnit,
          weightPoundInpt, weightinpt);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
